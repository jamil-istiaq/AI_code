# -*- coding: utf-8 -*-
"""18-37918-2-week-11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TbNVHUteRLFtL4TdxvSr9uOjy2DkuC1_

Name: Md. Jamil Istiaq
ID: 18-37918-2
"""

cgraph = {'WA': ['SA', 'NT'], 'Q': ['SA', 'NT', 'NSW'], 'T': [],
'V': ['SA', 'NSW'], 'SA': ['WA', 'NT', 'Q', 'NSW','V'], 
          'NT': ['Q', 'WA', 'SA'], 'NSW': ['Q', 'V', 'SA']}
okColor={}

# write a method to get the highest degree node

def get_node_hd():
    mnode = ''
    length = 0
    for k in cgraph.keys():
        if(len(cgraph[k])>length and k not in okColor.keys()):
            length = len(cgraph[k])
            mnode = k
    return mnode

get_node_hd()

colorstochooselist={'WA': ['red','green', 'blue'], 
                    'Q': ['red','green', 'blue'],
                    'T': ['red', 'green', 'blue'],
                    'V':  ['red','green', 'blue'], 
                    'NT': ['red','green', 'blue'],
                    'SA': ['red','green', 'blue'],                    
                    'NSW': ['red','green', 'blue']}

import random
def get_color(node):
    # check colorstochooselist[node] is empty or not
    # return 'no color'
    if (len(colorstochooselist[node])!=0):
        color = random.choice(colorstochooselist[node])
        colorstochooselist.pop(node)
    # update color options
        adjList = cgraph[node]
        for adj in adjList:
            if(adj in colorstochooselist.keys()):
                colorstochooselist[adj].remove(color)
    #print(adjList)
            return color
    
    else:
        print('No Color')

# assign color to the highest degree node
hdNode = get_node_hd()
okColor[hdNode]= get_color(hdNode)
print(colorstochooselist)
print(okColor)

def get_node_MRV():
    node=''
    length = 5
    for k in colorstochooselist.keys():
        if(len(colorstochooselist[k])<length):
            length = len(colorstochooselist[k])
            node = k
    return node

get_node_MRV()

L = len(colorstochooselist)
for i in range(0,L):
    # assign color to the Minimum Remaining Value
    mrvNode = get_node_MRV()
    selected_color = get_color(mrvNode)
    # if no color returned then print failure
    okColor[hdNode]= selected_color
    print(colorstochooselist)
    print(okColor)