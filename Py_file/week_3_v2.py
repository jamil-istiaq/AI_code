# -*- coding: utf-8 -*-
"""18-37918-2-week-3-v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jMPyGFoOUWy4HY1jfUsuUBI4t7wpTNEy

Name: Istiaq Md. Jamil
Id: 18-37918-2
Sec: F

# Table driven agent

# Laptop charging status

system will say when what state is happned and status.
if PowerOn-->charge, Poweroff-->Dosconnect, Sleep--> DoNothing, Lock--> Disconnect
"""

table={('PowerOn'):'Charge',('Lock'):'Discnt',('Sleep'):'Donothing',('PowerOff'):'Discnt'}
percepts=[]    
def table_driven_agent(percept):
    print(percept)
    percepts.append(percept)
    action = lookup(percept,table)
    return action
 
def lookup(percept,table):
    for key in table:
        if key == percept:
            return table[key]
 
import random
Condition = random.choice(['PowerOn','Lock','Sleep','PowerOff'])
 
while True:
    action= table_driven_agent((Condition))
    print(action)
    cmd = input()
    if(cmd == 'stop'): break
    if action == 'Charge':
        Condition = random.choice(['PowerOn','Lock','PowerOff','Sleep'])
    elif action== 'Discnt':
        Condition = random.choice(['PowerOn','Lock','PowerOff','Sleep'])
    elif action== 'Donothing':
        Condition = random.choice(['PowerOn','Lock','PowerOff','Sleep'])
    else:
        Condition = ''

"""# Simple reflex agent"""

def simple_reflex_agent(percept):
    print(percept)
    if percept[1]=='PowerOn':
        action = 'Charge'
    elif percept[0]=='Lock':
        action = 'Discnt'
    elif percept[0]=='PowerOff':
        action = 'Discnt'
    elif percept[0]=='Sleep':
        action = 'Donothing'
    return action

import random
Condition = random.choice(['PowerOn','Lock','Sleep','PowerOff'])

while True:
    action= table_driven_agent((Condition))
    print(action)
    cmd = input()
    if(cmd == 'stop'): break
    if action == 'Charge':
        Condition = random.choice(['PowerOn','Lock','PowerOff','Sleep'])
    elif action== 'Discnt':
        Condition = random.choice(['PowerOn','Lock','PowerOff','Sleep'])
    elif action== 'Donothing':
        Condition = random.choice(['PowerOn','Lock','PowerOff','Sleep'])
    else:
        Condition = ''

"""# Model based agent"""

model = {'PowerOn':'Unknown', 'PowerOff':'Unknown','Sleep':'Unknown','Lock':'Unknown'}
state = 'Disconnect'
action = 'Unknown'

def update_state(percept, model):
    global state, action
    if action=='PowerOn':
        model[percept[0]]='Charge'
    if model['PowerOn']=='Charge' and model['Sleep']=='Charge':
        state = 'Connect'
    else:
        state = 'Disconnect'
    return state
        

def model_based_reflex_agent(percept):
    global state,action,model
    model[percept[0]]=percept[1]
    state = update_state(percept, model)
    print('Perception: '+str(percept)) 
    print('Model: '+str(model))   
    print('State: '+str(state))  
    if state == 'PowerOn':
        action = 'Charge'
    elif percept[1]=='Poweoff':
        action = 'Disconnect'
    elif percept[0]=='Sleep':
        action = 'Disconnect'
    elif percept[0]=='Lock':
        action = 'Do Nothing'
    return action


import random
Location = random.choice(['PoweOn','PowerOff','Sleep','Lock'])
Condition= random.choice(['Charge','Disconnect','Do Nothing'])

while True:
    action = model_based_reflex_agent((Location,Condition))
    print('Action: '+ str(action))
    if action == 'Charge':
        Location = 'PowerOn'
        Condition = random.choice(['Charge','Disconnect','Do Nothing'])
    elif action == 'Disconnect':
        Location = 'PowerOff'
        Condition = random.choice(['Charge','Disconnect','Do Nothing'])
    else :
        Location = 'Sleep'
        Condition = random.choice(['Charge','Disconnect','Do Nothing'])
        break