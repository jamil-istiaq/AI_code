# -*- coding: utf-8 -*-
"""16-31752-1-sec-f-task-no-10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bQWMmMQ_xX7p3YIHwU-7VEEPSeyKRcso

Md.Asif Jardary; ID: 16-31752-1 ; Task No : 10

# N Queen Attack Detection
"""

import random
N = 4
r = []
c = []
for i in range(1, N+1):
    r.append(random.choice(range(1, N+1)))
    c.append(random.choice(range(1, N+1)))
    #check repetition of position
    print('Q{}: {},{}'.format(i,r[-1],c[-1]))
print(r)
print(c)

# row attack
for i in range(0,N):
    for j in range(i+1,N):
        if(r[i] == r[j]):
            print('row attack: row:{} column:{} and {}'.format(r[i],c[i],c[j]))

#column attack
for i in range(0,N):
    for j in range(i+1,N):
        if(c[i] == c[j]):
            print('Column attack: column :{} row:{} and {}'.format(c[i],r[i],r[j]))

"""abs(j - l) = abs(k - i)"""

# diagonal atack

for i in range(0,N):
      p=c[i]-c[i+1]
        if(p < 0):
            p=p*(-1) 
    for j in range(i+1,N):
        q=r[j]-r[j-1]
        if(q < 0):
            q=q*(-1)
        if(p == q):
            print('Diagonal attack: row :{} column:{}'.format(r[i],c[j]))

# implement a method to print a state is valid or not
# input r and c (two lists)

def is_valid(r[],c[],N)
 for i in range(0,N):
    for j in range(i+1,N):
        if(r[i] == r[j]):
            print('row attack: row:{} column:{} and {}'.format(r[i],c[i],c[j]))
            
for i in range(0,N):
    for j in range(i+1,N):
        if(c[i] == c[j]):
            print('Column attack: column :{} row:{} and {}'.format(c[i],r[i],r[j]))
            
for i in range(0,N):
      p=c[i]-c[i+1]
        if(p < 0):
            p=p*(-1) 
    for j in range(i+1,N):
        q=r[j]-r[j-1]
        if(q < 0):
            q=q*(-1)
        if(p == q):
            print('Diagonal attack: row :{} column:{}'.format(r[i],c[j]))

is_valid(r,c,N)