# -*- coding: utf-8 -*-
"""18-37918-2-week10-v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GIdakujyGC9C_7Sj7wpr0bIMPhaGJZsY

Name: Md. Jamil Istiaq, Sec: F, ID: 18-37918-2

# N Queen Attack Detection
"""

import random
N = 4
r = []
c = []
for i in range(1, N+1):
    r.append(random.choice(range(1, N+1)))
    c.append(random.choice(range(1, N+1)))
    #check repetition of position
    print('Q{}: {},{}'.format(i,r[-1],c[-1]))
print(r)
print(c)

# row attack
for i in range(0,N):
    for j in range(i+1,N):
        if(r[i] == r[j]):
            print('row attack: row:{} column:{} and {}'.format(r[i],c[i],c[j]))

#column attack
for i in range(0,N):
    for j in range(i+1,N):
        if(c[i] == c[j]):
            print('column attack: row:{} column:{} and {}'.format(r[i],c[i],c[j]))

# diagonal atack
for i in range(0,N):
    for j in range(i+1,N):
        if((abs(c[i]-c[j]))==(abs(r[i]-r[j]))):
            print('Diagonal attack: row:{} column:{} and {}'.format(r[i],r[j],c[i],c[j]))

def board_status():
    import random
    N = 4
    r = []
    c = []
    for i in range(1, N+1):
        r.append(random.choice(range(1, N+1)))
        c.append(random.choice(range(1, N+1)))
        #check repetition of position

def row_attack():
    # row attack
    for i in range(0,N):
        for j in range(i+1,N):
            if(r[i] == r[j]):
                return True           
            
def column_attack():
    #column attack
    for i in range(0,N):
        for j in range(i+1,N):
            if(c[i] == c[j]):
                return True    
            
def daigonal_attack():
    # diagonal atack
    for i in range(0,N):
        for j in range(i+1,N):
            if((abs(c[i]-c[j]))==(abs(r[i]-r[j]))):
                return True

def isValid():
    if(row_attack()==True or column_attack()==True or daigonal_attack()==True):
        print('Invalid Solution')
    else:
        print('Valid Solution')

isValid()

# implement a method to print a state is valid or not
# input r and c (two lists)