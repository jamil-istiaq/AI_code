# -*- coding: utf-8 -*-
"""18-37918-2-week-8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wgX-MwOdimgxAXtaMKHT5-dP05Iz473l

# Name: Md. Jamil Istiaq
# Id: 18-37918-2

# Problem: Maximie f(x) = x^2 when x= 1 to 31

# Step 1: Initialize Population
"""

[i for i in range(4)]

import random
def initPopulation(n,b):
    p={}
    for i in range(n):
        s=[]
        for j in range(b):
            s.append(random.choice([0,1]))    
        p[i]=s
    return p

population=initPopulation(6,5)
population

"""# Step 2: Parent Selection

Fitness Calculation
"""

[i for i in range(4,-1,-1)]

def getFitness(p):
    f=[]
    for k in p.keys():
        d = 0
        b = len(p[k])
        for i in range(b-1,-1,-1):
            d=d+p[k][i]*2**(4-i)
        f.append(d**2)
    return f

fitness = getFitness(population)
fitness

"""calculate probability and select parents"""

def select_parent(n,fitness):
    total_fitness = sum(fitness)
    probabilities = [round(f/total_fitness,3) for f in fitness]
    parents = {}
    for i in range(n):
        r =random.choice(range(1,1001,1))/1000
        s = 0
        for j in range(len(probabilities)):
            s = s + probabilities[j]
            if(s>r):
                parents[i]=population[j]
                #print(population[j])
                break
    return parents

parents = select_parent(4,fitness)
parents

list = [(k, v) for k, v in parents.items()]

print(list)

"""# Step 3: Crossover"""

cp = random.choice(range(1,4))
cp

def crossover():
    global parents
    
    cross_point = cp
    parents=str(parents)
    parents=([(parents[0][0:cross_point +0] +parents[1][cross_point+0:2])])
    parents=([(parents[1][0:cross_point +0] +parents[0][cross_point+0:2])])
   
    print(parents)
    
crossover()

def mutation() :
    global populations, parents
    mute = random.randint(1,31)
    if mute == 20 :
        x=random.randint(0,2)
        y = random.randint(0,4)
        parents[x][y] = 1-parents[x][y]
    populations = parents
    print(populations)
mutation()

"""# Step 4: Select Survivor
The selected survivors (solutions) will be added to population

Select top 2 offspring based on fitness value and add them to population.

Repeat Step 2 to 4 for further iterations
"""

for i in range(10) :
    fitness
    select_parent(4,fitness) 
    crossover()
    mutation()
print("Best:")
print(best)
print("Sequence-->")
print(populations[0])